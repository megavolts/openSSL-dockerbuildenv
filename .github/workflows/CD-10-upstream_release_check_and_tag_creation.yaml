# 1 - Daily check of OpenSSL upstream release
name: CD 10 Release Check and Tag Creation

on:
  schedule:
    - cron: '0 17 * * mon-fri'
  workflow_dispatch:

jobs:
  openssl_release_check:
    runs-on: ubuntu-latest
              
    steps:
      - name: Get versions
        id: GET_VERSIONS
        run: |
            # OpenSSL Release, skipping prerelease
            BOOL="$(curl -s https://api.github.com/repos/openssl/openssl/releases | jq '.[0] | .prerelease')"
            if $BOOL; then
                echo "Pre-release, skipping"
                exit 1
            else
                echo OPENSSL_VERSION="$(curl -s https://api.github.com/repos/openssl/openssl/releases | jq '.[0] | .name' -r | grep -Eo '([0-9]+)(\.?[0-9]+)*' | head -1)" >> $GITHUB_OUTPUT 
            fi

            echo OPENSSL_BUILDENV_VERSION="$(curl -s https://raw.githubusercontent.com/megavolts/openssl-dockerbuildenv/refs/heads/main/.current_release | awk '/^OPENSSL_VERSION=/' | cut -d= -f2)" >> $GITHUB_OUTPUT  
            # TO BE REPLACE BY AFTER FIRST RELEASE
            # echo OPENSSL_BUILDENV_VERSION="$(curl -s https://raw.githubusercontent.com/megavolts/openssl-dockerbuildenv/releases | jq '.[0] | .name' -r | grep -Eo '([0-9]+)(\.?[0-9]+)*' | head -1)" >> $GITHUB_OUTPUT

      - name: Is update available
        run: |
          if ! [[ "${{ steps.GET_VERSIONS.outputs.OPENSSL_VERSION }}" = "${{ steps.GET_VERSIONS.outputs.OPENSSL_BUILDENV_VERSION }}" ]]; then
            echo "Update found for OpenSSL"
          else
            echo "No update found"
            exit 1
          fi 
         
      - name: Checkout source
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          
      - name: Import GPG key 
        id: IMPORT_GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PWD }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_push_gpgsign: false
          trust_level: 5

      - name: Update Buildvars
        id: UPDATE_BUILDVARS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}  
          OPENSSL_VERSION=${{ steps.GET_VERSIONS.outputs.OPENSSL_VERSION }} 
          BUILD_DATETIME=$(date  --iso-8601=minute --utc | cut -d+ -f1)

          echo BUILD_DATETIME=$BUILD_DATETIME > buildvars
          echo OPENSSL_VERSION=$OPENSSL_VERSION >> buildvars
          git add buildvars
          git commit buildvars -m "Updated buildvars"
          echo BUILDENV_VERSION=$BUILDENV_VERSION >> $GITHUB_OUTPUT
          #          git push origin main

      - name: Update tag and push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_AUTHOR_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
          GIT_COMMITTER_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
          GIT_COMMITTER_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          # new build
          OPENSSL_VERSION=${{ steps.GET_VERSIONS.outputs.OPENSSL_VERSION }} 
          
          RELEASE_TAG=v$OPENSSL_VERSION
          git tag -a "$RELEASE_TAG" -m "$RELEASE_TAG"
          git push -u origin "$RELEASE_TAG"
          git fetch --all --tags
          git checkout

          exit 0