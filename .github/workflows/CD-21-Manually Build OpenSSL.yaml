# 2 - Build OpenSSL docker build environement
name: 21 Manually Build OpenSSL

on:   
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  buildvars:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      BUILD_IMAGE_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_IMAGE_VERSION }}
      OPENSSL_VERSION: ${{ steps.IMPORT_BUILDVARS.outputs.OPENSSL_VERSION }}
      BUILD_DATE: ${{ steps.IMPORT_BUILDVARS.outputs.BUILD_DATE }}
    
    steps:             
    - name: Checkout source
      uses: actions/checkout@v5
      with:
        persist-credentials: false
    
    - name: Import build variables from buildvars file
      id: IMPORT_BUILDVARS
      run: |
        FLAG_NEWREVISION=false
        cat buildvars | grep BUILD_DATE >> $GITHUB_OUTPUT
        cat buildvars | grep OPENSSL_VERSION >> $GITHUB_OUTPUT
        BUILD_IMAGE_VERSION=$(cat buildvars | grep BUILD_IMAGE_VERSION  | cut -d= -f2)

        if [[ $(curl -s https://api.github.com/repos/megavolts/openssl_dockerbuildenv-docker/releases | grep "status" | cut -d\" -f4) = 404 ]];
            then
            echo "No release existing"
        else
            # Check for latest release version
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/megavolts/openssl_dockerbuildenv-docker/releases | jq '.[0] | .name' -r)

            if [[ $LATEST_RELEASE = $BUILD_IMAGE_VERSION ]];
                then
                echo "Release $BUILD_IMAGE_VERSION already exist. Updated build version with next revision"
                BUILD_VERSION=$( echo $BUILD_IMAGE_VERSION | cut -d- -f1)
                BUILD_REVISION=$( echo $BUILD_IMAGE_VERSION | cut -d- -f2)
                BUILD_REVISION=$(( $BUILD_IMAGE_VERSION +1 ))
                BUILD_IMAGE_VERSION=$BUILD_VERSION-$BUILD_REVISION

                # Update buildvars
                echo "FLAG_NEWREVISION=true"
            fi
            echo "BUILD_IMAGE_VERSION=$BUILD_IMAGE_VERSION" >> $GITHUB_OUTPUT
        fi

        echo "Building docker image $BUILD_IMAGE_VERSION with $OPENSSL_DOCKERBUILDENV_VERSION openssl, $UNBOUND_DOCKERBUILDENV_VERSION unbound and AdguardHome v$ADGUARD_VERSION on $BUILD_DATE"

    - name: Import GPG key 
      id: IMPORT_GPG
      if: ${{ steps.IMPORT_BUILDVARS.outputs.FLAG_NEWREVISION }}
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.BOT_GPG_PWD }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_push_gpgsign: false
        trust_level: 5

    - name: Push updates buildvar to repository if needed
      if: ${{ steps.IMPORT_BUILDVARS.outputs.FLAG_NEWREVISION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_AUTHOR_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
        GIT_AUTHOR_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
        GIT_COMMITTER_NAME: ${{ steps.IMPORT_GPG.outputs.name }}
        GIT_COMMITTER_EMAIL: ${{ steps.IMPORT_GPG.outputs.email }}
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}  

        BUILD_DATE=$(date  --iso-8601=seconds --utc)
        OPENSSL_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.OPENSSL_VERSION }}
        BUILD_IMAGE_VERSION=${{ steps.IMPORT_BUILDVARS.outputs.BUILD_IMAGE_VERSION }}
        
        echo "Upcoming build version: $BUILD_IMAGE_VERSION"
        echo BUILD_DATE=$BUILD_DATE > buildvars
        echo OPENSSL_VERSION=$OPENSSL_VERSION >> buildvars
        echo BUILD_IMAGE_VERSION=$BUILD_IMAGE_VERSION >> buildvars

        git add buildvars
        git commit buildvars -m "Updated buildvars"
        git push or
        
  build: 
    runs-on: ubuntu-latest
    needs: buildvars
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Install the cosign tool except on PR
        # https://github.com/sigstore/cosign-installer

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ./openssl/Dockerfile
          build-args: |
            OPENSSL_VERSION=${{ needs.buildvars.outputs.OPENSSL_VERSION }}
            BUILD_DATE=${{ needs.buildvars.outputs.BUILD_DATE }}
            BUILD_IMAGE_VERSION=${{ needs.buildvars.outputs.BUILD_IMAGE_VERSION }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
